/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.apuestasdeportivas;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import static javax.swing.WindowConstants.EXIT_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author nelsonrivas
 */
public class ApuestasForm extends javax.swing.JFrame {
    
    private DefaultTableModel tableModel;
    private Socket socket;
    private ObjectOutputStream output;
    private ObjectInputStream input;

    /**
     * Creates new form ApuestasForm
     */
    public ApuestasForm() throws IOException {
        initComponents();
        
        setSize(500, 450);
        socket = new Socket("localhost", 12340);
    
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        setLocationRelativeTo(null);
    
        Thread receiveMessages = new Thread(new ReceiveMessages(socket, this));
        receiveMessages.start();
        System.out.println("Conectado al servidor.");

        try {
             // Inicializa el flujo de salida para enviar datos al servidor
        output = new ObjectOutputStream(socket.getOutputStream());

        // Envía un mensaje al servidor para solicitar la lista inicial de estudiantes
         output.writeObject("LIST");
        } catch (IOException e) {
    // Si ocurre un error en la conexión, muestra un mensaje de error al usuario
        JOptionPane.showMessageDialog(this, "No se pudo conectar al servidor.", "Error", JOptionPane.ERROR_MESSAGE);
         System.exit(1); // Finaliza la aplicación
         }

        tableModel = new DefaultTableModel(
    new String[]{"Id", "Fecha",  "Apostador","Evento","Ganador", "Monto"}, 0
);
        
// Asocia el modelo de datos a la tabla gráfica en la interfaz
        ApuestasTb.setModel(tableModel);
        
         ingresarBtn.addActionListener(e -> {
    try {
        insertarApuesta();
    } catch (IOException ex) {
        Logger.getLogger(ApuestasForm.class.getName()).log(Level.SEVERE, null, ex);
    }
});


// Evento para la tabla: se ejecuta cuando se hace clic en una fila de la tabla
ApuestasTb.addMouseListener(new MouseAdapter() {
    @Override
    public void mouseClicked(MouseEvent e) {
        // Obtiene el índice de la fila seleccionada
        int filaSeleccionada = ApuestasTb.getSelectedRow();

        // Si hay una fila seleccionada, llena los campos de texto con los datos de la fila
        if (filaSeleccionada != -1) {
            idTxt.setText(tableModel.getValueAt(filaSeleccionada, 0).toString());
            fechaTxt.setText(tableModel.getValueAt(filaSeleccionada, 1).toString());
            apostadorTxt.setText(tableModel.getValueAt(filaSeleccionada, 2).toString());
            ganadorTxt.setText(tableModel.getValueAt(filaSeleccionada, 3).toString());
            eventoTxt.setText(tableModel.getValueAt(filaSeleccionada, 4).toString());
            montoTxt.setText(tableModel.getValueAt(filaSeleccionada, 5).toString());
        }
    }
});

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ApuestasTb = new javax.swing.JTable();
        idTxt = new javax.swing.JTextField();
        fechaTxt = new javax.swing.JTextField();
        apostadorTxt = new javax.swing.JTextField();
        eventoTxt = new javax.swing.JTextField();
        ganadorTxt = new javax.swing.JTextField();
        montoTxt = new javax.swing.JTextField();
        ingresarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID");

        jLabel2.setText("Fecha");

        jLabel3.setText("Apostador");

        jLabel4.setText("Evento");

        jLabel5.setText("Ganador");

        jLabel6.setText("Monto");

        ApuestasTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Fecha", "Apostador", "Evento", "Ganador", "Monto"
            }
        ));
        jScrollPane1.setViewportView(ApuestasTb);

        idTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTxtActionPerformed(evt);
            }
        });

        ganadorTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ganadorTxtActionPerformed(evt);
            }
        });

        ingresarBtn.setText("Ingresar");
        ingresarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(26, 26, 26)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(fechaTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                            .addComponent(apostadorTxt)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(74, 74, 74)
                                        .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ganadorTxt)
                                    .addComponent(montoTxt)
                                    .addComponent(eventoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(ingresarBtn)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(eventoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ganadorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(apostadorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(montoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(ingresarBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTxtActionPerformed

    private void ganadorTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ganadorTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ganadorTxtActionPerformed

    private void ingresarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarBtnActionPerformed
         
    }//GEN-LAST:event_ingresarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApuestasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApuestasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApuestasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApuestasForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try {
    // Crea y muestra la ventana principal de la aplicación
    new ApuestasForm().setVisible(true);
} catch (IOException ex) {
    // Maneja excepciones relacionadas con la entrada/salida (IO), si ocurren durante la inicialización
    Logger.getLogger(ApuestasForm.class.getName()).log(Level.SEVERE, null, ex);
}
    }
  
     private static class ReceiveMessages implements Runnable {
   // Atributos de la clase
    private Socket socket;  // Socket que representa la conexión con el servidor
    private ApuestasForm apuestasForm; // Referencia al formulario para actualizar la tabla

// Constructor que inicializa el socket y la referencia al formulario
// Se utiliza para permitir la comunicación entre el cliente y el servidor
    public ReceiveMessages(Socket socket, ApuestasForm apuestasForm) {
     this.socket = socket; // Asigna el socket para la comunicación con el servidor
     this.apuestasForm = apuestasForm; // Asigna el formulario para actualizar la tabla de estudiantes
}

    @Override
public void run() {
    try {
        // Crea un flujo de entrada para leer datos (objetos) provenientes del servidor
        ObjectInputStream input = new ObjectInputStream(socket.getInputStream());

        // Bucle infinito para escuchar constantemente los mensajes del servidor
        while (true) {
            try {
                // Intenta leer un objeto enviado por el servidor
                Object received = input.readObject();
                System.out.println("Mensaje recibido desde el servidor.");

                // Verifica si el objeto recibido es una lista de estudiantes
                if (received instanceof List) {
                    @SuppressWarnings("unchecked")
                    // Convierte el objeto recibido en una lista de objetos tipo Estudiante
                    List<ClaseApuesta> apuestas = (List<ClaseApuesta>) received;
                    System.out.println("Lista de apuestas recibida: " + apuestas);

                    // Llama al método para actualizar la tabla del formulario con la nueva lista
                    apuestasForm.actualizarTabla(apuestas);
                } else {
                    // Si el objeto recibido no es reconocido, lo imprime para depuración
                    System.out.println("Objeto no reconocido recibido del servidor: " + received);
                    
                // Mostrar un mensaje de éxito al usuario, indicando que el estudiante fue eliminado correctamente
                JOptionPane.showMessageDialog(apuestasForm,received, "Éxito", JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (ClassNotFoundException ex) {
                // Maneja errores si no se encuentra la clase del objeto recibido
                System.out.println("Clase no encontrada al leer el objeto: " + ex.getMessage());
                Logger.getLogger(ApuestasForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } catch (IOException e) {
        // Maneja errores de entrada/salida durante la conexión o lectura
        System.out.println("Error al recibir mensajes: " + e.getMessage());
    }
}

}
  
     public void actualizarTabla(List<ClaseApuesta> apuestas) {
    // Ejecutar en el hilo del despacho de eventos
SwingUtilities.invokeLater(() -> {
    // Limpiar la tabla antes de actualizarla para evitar duplicar filas
    tableModel.setRowCount(0);

    // Iterar sobre la lista de estudiantes para agregar cada uno a la tabla
    for (ClaseApuesta apuesta : apuestas) {
        // Añadir una nueva fila a la tabla con los datos del estudiante
        tableModel.addRow(new Object[]{
            apuesta.getId(),         
            apuesta.getFecha(),          
            apuesta.getApostador(),      
            apuesta.getEvento(),  
            apuesta.getGanador(),  
            apuesta.getMonto()
        });
    }
});

}
     
  
 private void insertarApuesta() throws IOException {
  
            
       // Obtener el objeto Estudiante desde los campos del formulario
ClaseApuesta apuesta = obtenerApuestaDeCampos();

// Enviar el comando "INSERT" al servidor para indicar que se va a insertar un nuevo estudiante
output.writeObject("INSERT");

// Enviar el objeto Estudiante al servidor
output.writeObject(apuesta);

// Mostrar un mensaje de éxito al usuario, indicando que el estudiante fue insertado correctamente
JOptionPane.showMessageDialog(this, "Apuesta insertada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    
    }
    
 private void limpiarCampos() {
        idTxt.setText("");
        fechaTxt.setText("");
        apostadorTxt.setText("");
        eventoTxt.setText("");
        ganadorTxt.setText("");
        montoTxt.setText("");
     
    }

    private ClaseApuesta obtenerApuestaDeCampos() {
        int id = 0;
        String fecha = fechaTxt.getText();
        String apostador = apostadorTxt.getText();
        String evento = eventoTxt.getText();
        String ganador = apostadorTxt.getText();
        float monto= Float.parseFloat((montoTxt.getText()));
        return new ClaseApuesta(id, fecha,apostador,evento,ganador,monto);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApuestasTb;
    private javax.swing.JTextField apostadorTxt;
    private javax.swing.JTextField eventoTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField ganadorTxt;
    private javax.swing.JTextField idTxt;
    private javax.swing.JButton ingresarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField montoTxt;
    // End of variables declaration//GEN-END:variables
}
